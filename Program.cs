using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_Sharp_Lecture_2
{
    class Program
    {
        static void Main(string[] args)
        {
            #region Теория
            // Логика. Логические операции. Ветвления.
            // Тип bool. Операторы if-else, ?:(тернарный оператор),
            // Оператор многозначного выбора (switch)

            // 0 - false (Нет, ложь), явление не может произойти
            // 1 - true (Да, истина), явление может произойти

            // Логические функции
            // И(*) - событие произойдет только тогда, 
            //     когда будут выполнены все необходимые условия
            // 0 * 0 = 0, 0 * 1 = 0, 1 * 0 = 0, 1 * 1 = 0.

            // ИЛИ(+) - событие произойдет только тогда, 
            //       когда выполнится ХОТЯ БЫ одно условие
            // 0 + 0 = 0, 0 + 1 = 1, 1 + 0 = 1, 1 + 1 = 1

            // НЕ(!) - отрицание события
            // !0 = 1, !1 = 0

            //  Взять зонт, чтобы не промокнуть(Нет)
            //  Идет ли дождь (Да)  
            //     Фунция И
            //  Есть ли зонт (Нет)

            // У вас было, когда-то два зонта, зеленый и красный. Взять зонт 
            // Есть ли у меня зеленый зонт (Да)
            //     Функция ИЛИ
            // Есть ли у меня красный зонт (Да)

            // Логические функции в C#
            // Функция И (&), сокращенная функция И (&&)
            // Функция ИЛИ (|), сокращенная функция И (||)
            // Функция НЕ (!)

            // Любая программа сводится к набору базовых действий:
            // Арифметические выражения (арифм. действие между двумя ячейками памяти)
            // Побитовые операции (перенос битов, сравнения битов, применение логических функций к отдельным битам)
            // Логические выражения (сводятся к принципу : Если(условие), ТО : {выполнить действие})
            // Переход по меткам (переход к конкретной ячейки памяти)
            // ВСЁ ОСТАЛЬНОЕ - ЭТО АБСТРАКЦИЯ, КОТОРАЯ СУЩЕСТВУЕТ В ПРЕДЕЛАХ ВАШЕЙ СРЕДЫ РАЗРАБОТКИ,
            // СОЗДАННАЯ ИСКЛЮЧИТЕЛЬНО, ДЛЯ ТОГО, ЧТОБЫ ОБЛЕГЧИТЬ ВАШУ ЖИЗНЬ, И МАКСИМАЛЬНО УСКОРИТЬ 
            // СКОРОСТЬ РАЗРАБОТКИ

            // Процесс, который превращает набор абстрактных команд в вашей студии, в готовый машинный код 
            // Ассемблера, называется компиляцией

            // Понятие команды в программировании
            // В низкоуровневом программировании (Assembler) - это одна задача, которую выполнит процессор за раз
            // В высокоуровневом программировании(C#, Java, C, C++) - это одна или более задач, которые при описании
            // команды указываются между двумя пределами кода ({}, (), ;), и вторым пределом, обязательно будет ;
            #endregion

            #region Логические операторы в C#

            #region Оператор if

            // ЕСЛИ(условие выполняется){
            //     выполнить набор команд;                 
            // }

            int a = 20;

            if (a > 20)
            {
                Console.WriteLine("a больше 20");
            }

            // ЕСЛИ(условие выполняется){
            //     выполнить набор команд1;                 
            // }
            // ИНАЧЕ {
            //     выполнить набор команд2;            
            // }

            if (a > 20)
            {
                Console.WriteLine("a больше 20");
            }
            else
            {
                Console.WriteLine("a меньше 20");
            }

            // ЕСЛИ(условие1 выполняется){
            //     выполнить набор команд1;                 
            // }
            // ИНАЧЕ ЕСЛИ(условие2 выполняется){
            //     выполнить набор команд2;   
            //  }
            // ИНАЧЕ {
            //     выполнить набор команд3;            
            // }

            if (a > 20)
            {
                Console.WriteLine("a больше 20");
            }
            else if (a < 20)
            {
                Console.WriteLine("a меньше 20");
            }
            else
            {
                Console.WriteLine("a равно 20");
            }

            #endregion

            #region Тернарный оператор ?:
            int b = 10;
            int c = 20;
            int d = 0;

            if (b > c)
            {
                d = b;
            }
            else
            {
                d = c;
            }

            //  Если выполняется условие ? ТО выполнить серию команд1 : ИНАЧЕ выполнить серию команд2 
            d = b > c ? b : c;

            #endregion

            #region Оператор switch
            // Пульт от телевизора

            int key = 1;

            if (key == 0)
            {
                Console.WriteLine("0 канал ");
            }
            else if (key == 1)
            {
                Console.WriteLine("1 канал");
            }
            else if (key == 2)
            {
                Console.WriteLine("2 канал");
            }

            // и тд...

            else
            {
                Console.WriteLine("Неизвестный канал");
            }

            // key - значение селектор
            switch (key)
            {
                case 0:
                    {
                        Console.WriteLine("0 канал ");
                        break;
                    }
                case 1:
                    {
                        Console.WriteLine("1 канал ");
                        break;
                    }
                case 2:
                    {
                        Console.WriteLine("2 канал ");
                        break;
                    }

                // и т.д...

                default:
                    {
                        Console.WriteLine("Неизвестный канал");
                        break;
                    }
            }


            #endregion

            #endregion

            #region Составные логические выражения

            int opr1 = 10;
            int opr2 = 20;
            int opr3 = 30;
            int res = 0;

            // && - Сокращенная функция И
            // При первой встрече не выполнения условия, остальные условия не проверяются, и результат 
            // сразу равен false 
            if (opr1 > opr2 && opr3 < opr1)
            {
                res = opr1 + opr2 + opr3;
            }

            // || - Сокращенная функция ИЛИ
            // При первой встрече выполнения условия, остальные условия не проверяются, и результат 
            // сразу равен true 
            if (opr2 > opr1 || opr1 < opr3)
            {
                res = opr1 + opr2 + opr3;
            }

            // Если у вас в условии есть вызов ряда функций, то скорее всего, вам будет нужно использовать
            // обычные функции И(&), ИЛИ(|). А ещё лучше, пересмотреть архитектуру вашего приложения, и
            // ваш код, с целью избежания подобного подхода.

            #endregion

            #region Таблица знаки сравнения

            // == - равенство
            // != - не равенство
            // > - больше
            // >= - больше или равно
            // < - меньше
            // <= - меньше или равно
            // & - функция И, побитовая И
            // && - сокращенная функци И
            // | - функция ИЛИ, побитовая ИЛИ
            // || - сокращенная функция ИЛИ
            // != - функция не
            // ^ - функция ИСКЛЮЧАЮЩЕЕ ИЛИ

            #endregion

            #region Побитовые операции
            // Перенос битов >>, << 
            // Логические функции &, |

            // 0010 1011 << 1
            // 0101 0110 - 86

            // Написать примеры побитовых операций

            // 0011 0010
            //     & 
            // 1010 0101
            // 0010 0000

            // 0011 0010
            //     |
            // 1010 0101
            // 1011 0111

            #endregion

            #region Приоритет операций
            // Посмотреть таблицу приоритетов операций
            #endregion
        }
    }
}
